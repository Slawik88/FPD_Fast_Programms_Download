[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "width",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "height",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "customtkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customtkinter",
        "description": "customtkinter",
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "on_click_list_of_categories_marks_callback",
        "importPath": "data_def",
        "description": "data_def",
        "isExtraImport": true,
        "detail": "data_def",
        "documentation": {}
    },
    {
        "label": "create_browser_window",
        "importPath": "window.applications_window_data.browser_window",
        "description": "window.applications_window_data.browser_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.browser_window",
        "documentation": {}
    },
    {
        "label": "create_message_window",
        "importPath": "window.applications_window_data.message_window",
        "description": "window.applications_window_data.message_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.message_window",
        "documentation": {}
    },
    {
        "label": "create_game_window",
        "importPath": "window.applications_window_data.game_window",
        "description": "window.applications_window_data.game_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.game_window",
        "documentation": {}
    },
    {
        "label": "create_music_window",
        "importPath": "window.applications_window_data.music_window",
        "description": "window.applications_window_data.music_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.music_window",
        "documentation": {}
    },
    {
        "label": "create_programming_window",
        "importPath": "window.applications_window_data.programming_window",
        "description": "window.applications_window_data.programming_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.programming_window",
        "documentation": {}
    },
    {
        "label": "create_tweaks_window",
        "importPath": "window.applications_window_data.tweaks_window",
        "description": "window.applications_window_data.tweaks_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.tweaks_window",
        "documentation": {}
    },
    {
        "label": "create_antivirus_window",
        "importPath": "window.applications_window_data.antivirus_window",
        "description": "window.applications_window_data.antivirus_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.antivirus_window",
        "documentation": {}
    },
    {
        "label": "create_installations_window",
        "importPath": "window.applications_window_data.installations_window",
        "description": "window.applications_window_data.installations_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.installations_window",
        "documentation": {}
    },
    {
        "label": "create_favorite_window",
        "importPath": "window.applications_window_data.favorite_window",
        "description": "window.applications_window_data.favorite_window",
        "isExtraImport": true,
        "detail": "window.applications_window_data.favorite_window",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "window.main_window",
        "description": "window.main_window",
        "isExtraImport": true,
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "remove_background",
        "kind": 2,
        "importPath": "delit_bg.delit_gb",
        "description": "delit_bg.delit_gb",
        "peekOfCode": "def remove_background(path):\n    for filename in os.listdir(path):\n        if filename.endswith('.png') or filename.endswith('.jpg'):\n            img = Image.open(os.path.join(path, filename))\n            img = img.convert(\"RGBA\")\n            datas = img.getdata()\n            newData = []\n            for item in datas:\n                if item[0] == 255 and item[1] == 255 and item[2] == 255:\n                    newData.append((255, 255, 255, 0))",
        "detail": "delit_bg.delit_gb",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "delit_dg.delit_dg",
        "description": "delit_dg.delit_dg",
        "peekOfCode": "API_KEY = \"64482fc31569a7.46325918\"\n# Путь к папке с изображениями\npath = \"img/messenger_icon\"\n# Перебор всех файлов в папке\nfor filename in os.listdir(path):\n    # Проверяем, что файл является изображением с расширением .jpg или .png\n    if filename.endswith(\".jpg\") or filename.endswith(\".png\"):\n        # Открываем текущий файл для чтения в двоичном режиме\n        with open(os.path.join(path, filename), 'rb') as image_file:\n            # Отправляем запрос на удаление фона с помощью API",
        "detail": "delit_dg.delit_dg",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "delit_dg.delit_dg",
        "description": "delit_dg.delit_dg",
        "peekOfCode": "path = \"img/messenger_icon\"\n# Перебор всех файлов в папке\nfor filename in os.listdir(path):\n    # Проверяем, что файл является изображением с расширением .jpg или .png\n    if filename.endswith(\".jpg\") or filename.endswith(\".png\"):\n        # Открываем текущий файл для чтения в двоичном режиме\n        with open(os.path.join(path, filename), 'rb') as image_file:\n            # Отправляем запрос на удаление фона с помощью API\n            response = requests.post(\n                'https://api.remove.bg/v1.0/removebg',",
        "detail": "delit_dg.delit_dg",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "json_data.insert_data",
        "description": "json_data.insert_data",
        "peekOfCode": "conn = sqlite3.connect('data_app.db')\nc = conn.cursor()\n# проитерироваться по данным и добавить каждую запись в таблицу\nfor app_name, app_data in data.items():\n    app_image_path = app_data['app_image_path']\n    app_developer = app_data['app_developer']\n    app_size = app_data['app_size']\n    app_url_website = app_data['app_url_website']\n    app_favorites = app_data['app_favorites']\n    c.execute(\"INSERT INTO game_app (app_image_path, app_name, app_developer, app_size, app_url_website, app_favorites) VALUES (?, ?, ?, ?, ?, ?)\",",
        "detail": "json_data.insert_data",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "json_data.insert_data",
        "description": "json_data.insert_data",
        "peekOfCode": "c = conn.cursor()\n# проитерироваться по данным и добавить каждую запись в таблицу\nfor app_name, app_data in data.items():\n    app_image_path = app_data['app_image_path']\n    app_developer = app_data['app_developer']\n    app_size = app_data['app_size']\n    app_url_website = app_data['app_url_website']\n    app_favorites = app_data['app_favorites']\n    c.execute(\"INSERT INTO game_app (app_image_path, app_name, app_developer, app_size, app_url_website, app_favorites) VALUES (?, ?, ?, ?, ?, ?)\",\n              (app_image_path, app_name, app_developer, app_size, app_url_website, app_favorites))",
        "detail": "json_data.insert_data",
        "documentation": {}
    },
    {
        "label": "clear_console",
        "kind": 2,
        "importPath": "parsers.parser",
        "description": "parsers.parser",
        "peekOfCode": "def clear_console():\n    os.system('cls' if os.name == 'nt' else 'clear')\ndef process_query(query):\n    # замена пробела на нижнее подчёркивание\n    query = query.replace(\" \", \"_\")\n    # опции для Firefox\n    options = webdriver.FirefoxOptions()\n    options.set_preference(\"browser.privatebrowsing.autostart\", True)\n    options.set_preference(\"network.cookie.cookieBehavior\", 1)\n    options.set_preference(\"browser.cookies.lifetimePolicy\", 2)",
        "detail": "parsers.parser",
        "documentation": {}
    },
    {
        "label": "process_query",
        "kind": 2,
        "importPath": "parsers.parser",
        "description": "parsers.parser",
        "peekOfCode": "def process_query(query):\n    # замена пробела на нижнее подчёркивание\n    query = query.replace(\" \", \"_\")\n    # опции для Firefox\n    options = webdriver.FirefoxOptions()\n    options.set_preference(\"browser.privatebrowsing.autostart\", True)\n    options.set_preference(\"network.cookie.cookieBehavior\", 1)\n    options.set_preference(\"browser.cookies.lifetimePolicy\", 2)\n    options.set_preference(\"browser.cache.disk.enable\", False)\n    options.add_argument(\"--disable-gpu\")",
        "detail": "parsers.parser",
        "documentation": {}
    },
    {
        "label": "create_antivirus_window",
        "kind": 2,
        "importPath": "window.applications_window_data.antivirus_window",
        "description": "window.applications_window_data.antivirus_window",
        "peekOfCode": "def create_antivirus_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.antivirus_window",
        "documentation": {}
    },
    {
        "label": "create_browser_window",
        "kind": 2,
        "importPath": "window.applications_window_data.browser_window",
        "description": "window.applications_window_data.browser_window",
        "peekOfCode": "def create_browser_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.browser_window",
        "documentation": {}
    },
    {
        "label": "create_favorite_window",
        "kind": 2,
        "importPath": "window.applications_window_data.favorite_window",
        "description": "window.applications_window_data.favorite_window",
        "peekOfCode": "def create_favorite_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.favorite_window",
        "documentation": {}
    },
    {
        "label": "create_game_window",
        "kind": 2,
        "importPath": "window.applications_window_data.game_window",
        "description": "window.applications_window_data.game_window",
        "peekOfCode": "def create_game_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.game_window",
        "documentation": {}
    },
    {
        "label": "create_installations_window",
        "kind": 2,
        "importPath": "window.applications_window_data.installations_window",
        "description": "window.applications_window_data.installations_window",
        "peekOfCode": "def create_installations_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.installations_window",
        "documentation": {}
    },
    {
        "label": "create_message_window",
        "kind": 2,
        "importPath": "window.applications_window_data.message_window",
        "description": "window.applications_window_data.message_window",
        "peekOfCode": "def create_message_window():  \n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных\n        conn = sqlite3.connect('data_app.db')\n        # создаем курсор\n        cursor = conn.cursor()",
        "detail": "window.applications_window_data.message_window",
        "documentation": {}
    },
    {
        "label": "create_music_window",
        "kind": 2,
        "importPath": "window.applications_window_data.music_window",
        "description": "window.applications_window_data.music_window",
        "peekOfCode": "def create_music_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.music_window",
        "documentation": {}
    },
    {
        "label": "create_programming_window",
        "kind": 2,
        "importPath": "window.applications_window_data.programming_window",
        "description": "window.applications_window_data.programming_window",
        "peekOfCode": "def create_programming_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.programming_window",
        "documentation": {}
    },
    {
        "label": "create_tweaks_window",
        "kind": 2,
        "importPath": "window.applications_window_data.tweaks_window",
        "description": "window.applications_window_data.tweaks_window",
        "peekOfCode": "def create_tweaks_window():  \n    conn = sqlite3.connect('data_app.db')\n    # создаем курсор\n    cursor = conn.cursor()\n    def open_website(url):\n        webbrowser.open(url)\n    check_var = tkinter.StringVar(value=\"off\")\n    def checkbox_event(app_id, app_image_path, app_name, app_developer, app_size, app_url_website):\n        # print(f\"\\n id: {app_id}\\n iamge_path: {app_image_path}\\n app_name: {app_name}\\n app_developer: {app_developer}\\n app_size: {app_size}\\n app_url: {app_url_website}\")\n        # создаем соединение с базой данных",
        "detail": "window.applications_window_data.tweaks_window",
        "documentation": {}
    },
    {
        "label": "on_clear_all_frame_for_home",
        "kind": 2,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "def on_clear_all_frame_for_home():\n    frame_for_home.grid(row=0, column=1)  # показываем фрейм для домашней страницы\n    frame_for_applications.grid_forget()  # скрываем фрейм для приложений\n    frame_for_settings.grid_forget()  # скрываем фрейм для настроек\ndef on_clear_all_frame_for_applications():\n    frame_for_applications.grid(row=0, column=2)  # показываем фрейм для приложений\n    frame_for_home.grid_forget()  # скрываем фрейм для домашней страницы\n    frame_for_settings.grid_forget()  # скрываем фрейм для настроек\ndef on_clear_all_frame_for_settings():\n    frame_for_settings.grid(row=0, column=3)  # показываем фрейм для настроек",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "on_clear_all_frame_for_applications",
        "kind": 2,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "def on_clear_all_frame_for_applications():\n    frame_for_applications.grid(row=0, column=2)  # показываем фрейм для приложений\n    frame_for_home.grid_forget()  # скрываем фрейм для домашней страницы\n    frame_for_settings.grid_forget()  # скрываем фрейм для настроек\ndef on_clear_all_frame_for_settings():\n    frame_for_settings.grid(row=0, column=3)  # показываем фрейм для настроек\n    frame_for_home.grid_forget()  # скрываем фрейм для домашней страницы\n    frame_for_applications.grid_forget()  # скрываем фрейм для приложений\n# создаем функцию для создания изображения кнопки\ndef image_menu(path):",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "on_clear_all_frame_for_settings",
        "kind": 2,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "def on_clear_all_frame_for_settings():\n    frame_for_settings.grid(row=0, column=3)  # показываем фрейм для настроек\n    frame_for_home.grid_forget()  # скрываем фрейм для домашней страницы\n    frame_for_applications.grid_forget()  # скрываем фрейм для приложений\n# создаем функцию для создания изображения кнопки\ndef image_menu(path):\n    button_image = customtkinter.CTkImage(light_image=Image.open(path),\n                                  dark_image=Image.open(path),\n                                  size=(30, 30))\n    return button_image",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "image_menu",
        "kind": 2,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "def image_menu(path):\n    button_image = customtkinter.CTkImage(light_image=Image.open(path),\n                                  dark_image=Image.open(path),\n                                  size=(30, 30))\n    return button_image\n# Создание фрейма для меню\nframe_menu = customtkinter.CTkFrame(\n    master=app, width=500, height=100, border_width=2, border_color=\"green\")\nframe_menu.grid(row=0, column=0, rowspan=10, sticky=\"nw\")\n# создание кнопок для меню",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "app = customtkinter.CTk()  # создаем объект приложения с помощью класса CTk из модуля customtkinter\n# узнаем размеры экрана\nscreen_width = app.winfo_screenwidth()\nscreen_height = app.winfo_screenheight()\n# вычисляем координаты центра экрана\ncenter_x = int(screen_width / 2 - width / 2)\ncenter_y = int(screen_height / 2 - height / 2)\n# устанавливаем окно по центру экрана\napp.geometry(f\"{width}x{height}+{center_x}+{center_y}\")\napp.title(f\"{app_title}\")  # устанавливаем заголовок окна",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "screen_width = app.winfo_screenwidth()\nscreen_height = app.winfo_screenheight()\n# вычисляем координаты центра экрана\ncenter_x = int(screen_width / 2 - width / 2)\ncenter_y = int(screen_height / 2 - height / 2)\n# устанавливаем окно по центру экрана\napp.geometry(f\"{width}x{height}+{center_x}+{center_y}\")\napp.title(f\"{app_title}\")  # устанавливаем заголовок окна\n# определяем функции для скрытия/отображения различных фреймов\ndef on_clear_all_frame_for_home():",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "screen_height = app.winfo_screenheight()\n# вычисляем координаты центра экрана\ncenter_x = int(screen_width / 2 - width / 2)\ncenter_y = int(screen_height / 2 - height / 2)\n# устанавливаем окно по центру экрана\napp.geometry(f\"{width}x{height}+{center_x}+{center_y}\")\napp.title(f\"{app_title}\")  # устанавливаем заголовок окна\n# определяем функции для скрытия/отображения различных фреймов\ndef on_clear_all_frame_for_home():\n    frame_for_home.grid(row=0, column=1)  # показываем фрейм для домашней страницы",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "center_x = int(screen_width / 2 - width / 2)\ncenter_y = int(screen_height / 2 - height / 2)\n# устанавливаем окно по центру экрана\napp.geometry(f\"{width}x{height}+{center_x}+{center_y}\")\napp.title(f\"{app_title}\")  # устанавливаем заголовок окна\n# определяем функции для скрытия/отображения различных фреймов\ndef on_clear_all_frame_for_home():\n    frame_for_home.grid(row=0, column=1)  # показываем фрейм для домашней страницы\n    frame_for_applications.grid_forget()  # скрываем фрейм для приложений\n    frame_for_settings.grid_forget()  # скрываем фрейм для настроек",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "center_y = int(screen_height / 2 - height / 2)\n# устанавливаем окно по центру экрана\napp.geometry(f\"{width}x{height}+{center_x}+{center_y}\")\napp.title(f\"{app_title}\")  # устанавливаем заголовок окна\n# определяем функции для скрытия/отображения различных фреймов\ndef on_clear_all_frame_for_home():\n    frame_for_home.grid(row=0, column=1)  # показываем фрейм для домашней страницы\n    frame_for_applications.grid_forget()  # скрываем фрейм для приложений\n    frame_for_settings.grid_forget()  # скрываем фрейм для настроек\ndef on_clear_all_frame_for_applications():",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "frame_menu",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "frame_menu = customtkinter.CTkFrame(\n    master=app, width=500, height=100, border_width=2, border_color=\"green\")\nframe_menu.grid(row=0, column=0, rowspan=10, sticky=\"nw\")\n# создание кнопок для меню\nbutton_home = customtkinter.CTkButton(master=frame_menu,\n                               text=\"Home\",\n                               width=200,\n                               height=60,\n                               corner_radius=15,\n                               font=('sistem', 20, 'bold'),",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_home",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_home = customtkinter.CTkButton(master=frame_menu,\n                               text=\"Home\",\n                               width=200,\n                               height=60,\n                               corner_radius=15,\n                               font=('sistem', 20, 'bold'),\n                               image=image_menu(path=r\"img\\main_menu_icon\\home.png\"),\n                               command=on_clear_all_frame_for_home)\nbutton_home.grid(row=1, column=1, pady=20, padx=15)\nbutton_applications = customtkinter.CTkButton(master=frame_menu, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_applications",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_applications = customtkinter.CTkButton(master=frame_menu, \n                                       text=\"Applications\", \n                                       width=200, \n                                       height=60,\n                                       corner_radius=15,\n                                       image=image_menu(path=r\"img\\main_menu_icon\\applications.png\"),\n                                       font=('sistem', 20, 'bold'),\n                                       command=on_clear_all_frame_for_applications)\nbutton_applications.grid(row=2, column=1, pady=20, padx=15)\nbutton_settings = customtkinter.CTkButton(master=frame_menu, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_settings",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_settings = customtkinter.CTkButton(master=frame_menu, \n                                   text=\"Settings\", \n                                   width=200, \n                                   height=60,\n                                   corner_radius=15, \n                                   image=image_menu(path=r\"img\\main_menu_icon\\settings.png\"),\n                                   font=('sistem', 20, 'bold'),\n                                   command=on_clear_all_frame_for_settings)\nbutton_settings.grid(row=3, column=1, pady=20, padx=15)\nbutton_0 = customtkinter.CTkButton(master=frame_menu, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_0",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_0 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, \n                                   height=60, \n                                   corner_radius=15,\n                                   image=image_menu(path=r\"img\\main_menu_icon\\zero.png\"),\n                                   font=('sistem', 20, 'bold'),\n                                   )\nbutton_0.grid(row=4, column=1, pady=20, padx=15)                                   \nbutton_1 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_1",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_1 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, \n                                   height=60, \n                                   corner_radius=15,\n                                   image=image_menu(path=r\"img\\main_menu_icon\\zero.png\"),\n                                   font=('sistem', 20, 'bold'),\n                                   )\nbutton_1.grid(row=5, column=1, pady=20, padx=15)\nbutton_2 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_2",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_2 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, \n                                   height=60, \n                                   corner_radius=15,\n                                   image=image_menu(path=r\"img\\main_menu_icon\\zero.png\"),\n                                   font=('sistem', 20, 'bold'),\n                                   )\nbutton_2.grid(row=6, column=1, pady=20, padx=15)\nbutton_3 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, ",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "button_3",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "button_3 = customtkinter.CTkButton(master=frame_menu, \n                                   width=200, \n                                   height=60, \n                                   corner_radius=15,\n                                   image=image_menu(path=r\"img\\main_menu_icon\\zero.png\"),\n                                   font=('sistem', 20, 'bold'),\n                                   )\nbutton_3.grid(row=7, column=1, pady=20, padx=15)                                   \n# Создание фрейма для кнопки home\nframe_for_home = customtkinter.CTkFrame(",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "frame_for_home",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "frame_for_home = customtkinter.CTkFrame(\n    master=app,                   # родительский виджет\n    width=500,                    # ширина фрейма\n    height=height,                # высота фрейма\n    border_width=2,               # ширина границы фрейма\n    border_color=\"green\"          # цвет границы фрейма\n)\n# Содержимое фрейма для home\nlabel1 = customtkinter.CTkLabel(\n    master=frame_for_home,        # родительский виджет",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "label1 = customtkinter.CTkLabel(\n    master=frame_for_home,        # родительский виджет\n    text=\"frame_home\"             # текст метки\n)\nlabel1.grid(row=1, column=1, pady=20, padx=15)  # размещение метки в фрейме\n# Создание фрейма для кнопки applications\nframe_for_applications = customtkinter.CTkFrame(\n    master=app,                   # родительский виджет\n    width=500,                    # ширина фрейма\n    height=height,                # высота фрейма",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "frame_for_applications",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "frame_for_applications = customtkinter.CTkFrame(\n    master=app,                   # родительский виджет\n    width=500,                    # ширина фрейма\n    height=height,                # высота фрейма\n    border_width=2,               # ширина границы фрейма\n    border_color=\"green\"          # цвет границы фрейма\n)\n# Содержимое фрейма для кнопки applications\nlabel_help_text = customtkinter.CTkLabel(master=frame_for_applications,\n                                         text=\"Select an application rosel that interests you\",",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "label_help_text",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "label_help_text = customtkinter.CTkLabel(master=frame_for_applications,\n                                         text=\"Select an application rosel that interests you\",\n                                         )\nlabel_help_text.grid(row=0, column=1, pady=20, padx=15)\nlist_of_categories_marks = customtkinter.CTkSegmentedButton(\n    master=frame_for_applications,            # родительский виджет\n    values=[\"Browsers\", \"Messages\", \"Games\", \"Music\", \"Programming\", \"Tweaks\", \"Antivirus\", \"Installation\", \"Favorites\"],  # значения кнопок\n    command=on_click_list_of_categories_marks_callback,  # функция, которая вызывается при нажатии на кнопку\n    font=(\"Arial\", 15)\n)",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "list_of_categories_marks",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "list_of_categories_marks = customtkinter.CTkSegmentedButton(\n    master=frame_for_applications,            # родительский виджет\n    values=[\"Browsers\", \"Messages\", \"Games\", \"Music\", \"Programming\", \"Tweaks\", \"Antivirus\", \"Installation\", \"Favorites\"],  # значения кнопок\n    command=on_click_list_of_categories_marks_callback,  # функция, которая вызывается при нажатии на кнопку\n    font=(\"Arial\", 15)\n)\nlist_of_categories_marks.grid(row=1, column=0, columnspan=3, pady=20, padx=15)  # размещение виджета в фрейме\n# Создание фрейма для кнопки settings\nframe_for_settings = customtkinter.CTkFrame(\n    master=app,                   # родительский виджет",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "frame_for_settings",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "frame_for_settings = customtkinter.CTkFrame(\n    master=app,                   # родительский виджет\n    width=500,                    # ширина фрейма\n    height=height,                # высота фрейма\n    border_width=2,               # ширина границы фрейма\n    border_color=\"green\",         # цвет границы фрейма\n)\n# Содержимое фрейма для settings\nlabel2 = customtkinter.CTkLabel(\n    master=frame_for_settings,     # родительский виджет",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "label2",
        "kind": 5,
        "importPath": "window.main_window",
        "description": "window.main_window",
        "peekOfCode": "label2 = customtkinter.CTkLabel(\n    master=frame_for_settings,     # родительский виджет\n    text=\"frame_settings\",         # текст метки\n)\nlabel2.grid(row=1, column=1, pady=20, padx=15)  # размещение метки в фрейме",
        "detail": "window.main_window",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "width = 1000 # ширина \nheight = 700 # высота\n#Заголовок окна\napp_title = \"Win_HP\"\n# розмеры приложения\ncustomtkinter.deactivate_automatic_dpi_awareness()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "height = 700 # высота\n#Заголовок окна\napp_title = \"Win_HP\"\n# розмеры приложения\ncustomtkinter.deactivate_automatic_dpi_awareness()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app_title",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "app_title = \"Win_HP\"\n# розмеры приложения\ncustomtkinter.deactivate_automatic_dpi_awareness()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "create_ctkframe",
        "kind": 2,
        "importPath": "data_def",
        "description": "data_def",
        "peekOfCode": "def create_ctkframe(master, row, column, sticky=None, rowspan=None, width=100, height=100, border_width=2, border_color=\"green\"):\n    # Создание экземпляра CTkFrame и размещение его на master, используя сеточную компоновку\n    customtkinter.CTkFrame(master=master, width=width, height=height, border_width=border_width, border_color=border_color\n    ).grid(row=row, column=column, rowspan=rowspan, sticky=sticky)\n# Создание обратного вызова функции on_click_list_of_categories_marks_callback\ndef on_click_list_of_categories_marks_callback(value):\n    # Вывод сообщения о нажатии на кнопку\n    print(\"segmented button clicked:\", value)\n    # Если нажата кнопка Browsers, вызов функции create_browser_window\n    if value == \"Browsers\":",
        "detail": "data_def",
        "documentation": {}
    },
    {
        "label": "on_click_list_of_categories_marks_callback",
        "kind": 2,
        "importPath": "data_def",
        "description": "data_def",
        "peekOfCode": "def on_click_list_of_categories_marks_callback(value):\n    # Вывод сообщения о нажатии на кнопку\n    print(\"segmented button clicked:\", value)\n    # Если нажата кнопка Browsers, вызов функции create_browser_window\n    if value == \"Browsers\":\n        create_browser_window()\n    # Если нажата кнопка Messages, создание нового окна\n    elif value == \"Messages\":\n        create_message_window()\n    # Если нажата кнопка Games, создание нового окна",
        "detail": "data_def",
        "documentation": {}
    },
    {
        "label": "switch_event",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def switch_event():\n    print(\"switch toggled, current value:\", switch_var.get())\nfor i in range(10):\n    switch_var = customtkinter.StringVar(value=\"on\")\n    switch = customtkinter.CTkSwitch(app, text=\"CTkSwitch\", command=switch_event,\n                                 variable=switch_var, onvalue=\"on\", offvalue=\"off\")\n    switch.pack()\napp.mainloop()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "app = customtkinter.CTk()\ndef switch_event():\n    print(\"switch toggled, current value:\", switch_var.get())\nfor i in range(10):\n    switch_var = customtkinter.StringVar(value=\"on\")\n    switch = customtkinter.CTkSwitch(app, text=\"CTkSwitch\", command=switch_event,\n                                 variable=switch_var, onvalue=\"on\", offvalue=\"off\")\n    switch.pack()\napp.mainloop()",
        "detail": "test",
        "documentation": {}
    }
]