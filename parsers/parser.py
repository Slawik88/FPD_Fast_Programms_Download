import time
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import base64
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
import os
from colorama import Fore, Style


def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')


def process_query(query):
    # –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
    query = query.replace(" ", "_")

    # –æ–ø—Ü–∏–∏ –¥–ª—è Firefox
    options = webdriver.FirefoxOptions()
    options.set_preference("browser.privatebrowsing.autostart", True)
    options.set_preference("network.cookie.cookieBehavior", 1)
    options.set_preference("browser.cookies.lifetimePolicy", 2)
    options.set_preference("browser.cache.disk.enable", False)
    options.add_argument("--disable-gpu")
    options.add_argument("--headless")

    # –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google Images
    driver = webdriver.Firefox(options=options)
    driver.get("https://images.google.com/")

    wait = WebDriverWait(driver, 10)

    try:
        # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies
        accept_cookie_button = wait.until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[2]/div[2]/div[3]/span/div/div/div/div[3]/div[1]/button[2]/div')))
        accept_cookie_button.click()
    except TimeoutException:
        pass

    # –ø–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    search_box = driver.find_element(By.NAME, 'q')
    search_box.send_keys(f"{query} messager logo, transparent background")
    search_box.submit()

    # –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    wait.until(EC.presence_of_element_located((By.XPATH, '//div[@id="islrg"]//img')))

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ —Ñ–∞–π–ª
    first_image = driver.find_element(By.XPATH, '//div[@id="islrg"]//img')
    image_base64 = first_image.get_attribute('src').split(',')[1]
    image_data = base64.b64decode(image_base64)

    if not os.path.exists('img\\temp_icon'):
        os.makedirs('img\\temp_icon')

    with open(f'img\\temp_icon\\icon_{query}.png', 'wb') as f:
        f.write(image_data)

    driver.quit()


if __name__ == '__main__':
    requests_input_list = input(f"{Fore.LIGHTCYAN_EX} üö© –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: {Style.RESET_ALL}").split(",")
    requests_input_max_workers = int(input(f"{Fore.LIGHTCYAN_EX} üö© –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å –ø–æ—Ç–æ–∫–æ–≤: {Style.RESET_ALL}"))
    clear_console()
    print(f"–ó–∞–ø—Ä–æ—Å—ã: {requests_input_list}")
    print(f"–ü–æ—Ç–æ–∫–∏: {requests_input_max_workers}")
    print(f"{Fore.YELLOW}  –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫...  {Style.RESET_ALL}")
    with ThreadPoolExecutor(max_workers=requests_input_max_workers) as executor:
        futures = [executor.submit(process_query, query.replace(" ", "_")) for query in requests_input_list]
        for future, query in tqdm(zip(futures, requests_input_list), total=len(requests_input_list)):
            future.result()
            tqdm.write(f"{Fore.GREEN }üòâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {query}!  {Style.RESET_ALL}")
    print(f"\n{Fore.GREEN} ‚úî –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {Style.RESET_ALL}")


