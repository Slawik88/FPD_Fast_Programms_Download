import time
import cv2
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import base64
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
import os
from colorama import Fore, Style


def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')



def scrape_icon(query):
    # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–ø—Ü–∏–π –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    options = Options()
    options.headless = True
    driver = webdriver.Firefox(options=options)
    driver.get(f'https://www.google.com/search?q={query}&tbm=isch')

    # —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    last_height = driver.execute_script('return document.body.scrollHeight')
    while True:
        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
        time.sleep(2)
        new_height = driver.execute_script('return document.body.scrollHeight')
        if new_height == last_height:
            break
        last_height = new_height

    # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = None
    image_url = None
    for element in driver.find_elements_by_css_selector('img.rg_i'):
        try:
            image_url = element.get_attribute('src')
            if image_url.startswith('http') and not image_url.endswith('svg'):
                image = requests.get(image_url).content
                break
        except:
            pass

    # –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if image is None:
        driver.quit()
        return None

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.exists('img\\temp_icon'):
        os.makedirs('img\\temp_icon')

    with open(f'img\\temp_icon\\icon_{query}.png', 'wb') as f:
        f.write(image)

    driver.quit()

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞
    image_path = f"img\\temp_icon\\icon_{query}.png"
    image = cv2.imread(image_path)

    # —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
    fgbg = cv2.createBackgroundSubtractorMOG2()
    fgmask = fgbg.apply(image)
    fg = cv2.bitwise_and(image, image, mask=fgmask)

    if not os.path.exists('img\\temp_icon_not_bg'):
        os.makedirs('img\\temp_icon_not_bg')
    cv2.imwrite(f'img\\temp_icon_not_bg\\icon_{query}.png', fg)

    return f'img\\temp_icon_not_bg\\icon_{query}.png'





if __name__ == '__main__':
    requests_input_list = input(f"{Fore.LIGHTCYAN_EX} üö© –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: {Style.RESET_ALL}").split(",")
    requests_input_max_workers = int(input(f"{Fore.LIGHTCYAN_EX} üö© –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å –ø–æ—Ç–æ–∫–æ–≤: {Style.RESET_ALL}"))
    clear_console()
    print(f"–ó–∞–ø—Ä–æ—Å—ã: {requests_input_list}")
    print(f"–ü–æ—Ç–æ–∫–∏: {requests_input_max_workers}")
    print(f"{Fore.YELLOW}  –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫...  {Style.RESET_ALL}")
    total_queries = len(requests_input_list)
    with ThreadPoolExecutor(max_workers=requests_input_max_workers) as executor:
        futures = [executor.submit(process_query, query.replace(" ", "_")) for query in requests_input_list]
        progress_bar = tqdm(total=total_queries)
        for future, query in zip(futures, requests_input_list):
            future.result()
            progress_bar.update(1)
            tqdm.write(f"{Fore.GREEN }üòâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {query}!  {Style.RESET_ALL}")
    print(f"\n{Fore.GREEN} ‚úî –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {Style.RESET_ALL}") 